// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Chest.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Metadata.
    /// </summary>
    public static partial class MetadataExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='collection'>
            /// </param>
            /// <param name='key'>
            /// </param>
            public static MetadataModel GetMetadata(this IMetadata operations, string category, string collection, string key)
            {
                return operations.GetMetadataAsync(category, collection, key).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='collection'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetadataModel> GetMetadataAsync(this IMetadata operations, string category, string collection, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMetadataWithHttpMessagesAsync(category, collection, key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='collection'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void Update(this IMetadata operations, string category, string collection, string key, MetadataModel model = default(MetadataModel))
            {
                operations.UpdateAsync(category, collection, key, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='collection'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this IMetadata operations, string category, string collection, string key, MetadataModel model = default(MetadataModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(category, collection, key, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='collection'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void Add(this IMetadata operations, string category, string collection, string key, MetadataModel model = default(MetadataModel))
            {
                operations.AddAsync(category, collection, key, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='collection'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddAsync(this IMetadata operations, string category, string collection, string key, MetadataModel model = default(MetadataModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddWithHttpMessagesAsync(category, collection, key, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='collection'>
            /// </param>
            /// <param name='key'>
            /// </param>
            public static void Remove(this IMetadata operations, string category, string collection, string key)
            {
                operations.RemoveAsync(category, collection, key).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='collection'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAsync(this IMetadata operations, string category, string collection, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveWithHttpMessagesAsync(category, collection, key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetCategories(this IMetadata operations)
            {
                return operations.GetCategoriesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetCategoriesAsync(this IMetadata operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCategoriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            public static IList<string> GetCollections(this IMetadata operations, string category)
            {
                return operations.GetCollectionsAsync(category).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetCollectionsAsync(this IMetadata operations, string category, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCollectionsWithHttpMessagesAsync(category, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='collection'>
            /// </param>
            public static IDictionary<string, IDictionary<string, string>> GetKeysWithData(this IMetadata operations, string category, string collection)
            {
                return operations.GetKeysWithDataAsync(category, collection).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='collection'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IDictionary<string, string>>> GetKeysWithDataAsync(this IMetadata operations, string category, string collection, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysWithDataWithHttpMessagesAsync(category, collection, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
